// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema for Legacy Hub feature

model Hub {
  id            String    @id @default(uuid())
  name          String
  description   String?
  ownerId       String    // References auth.users
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  memories      Memory[]
  invitations   Invitation[]
  flags         Flag[]
  viewers       ViewerAccess[]

  @@index([ownerId])
}

model Memory {
  id            String    @id @default(uuid())
  hubId         String
  content       String    // Text content or file path
  contentType   String    // "text", "image", "audio"
  authorId      String    // References auth.users
  isOwnerMemory Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  // Relations
  hub           Hub       @relation(fields: [hubId], references: [id], onDelete: Cascade)
  flags         Flag[]

  @@index([hubId])
  @@index([authorId])
}

model Flag {
  id            String    @id @default(uuid())
  hubId         String
  memoryId      String
  reporterId    String    // References auth.users
  reason        String
  status        String    // "pending", "approved", "rejected"
  createdAt     DateTime  @default(now())
  resolvedAt    DateTime?
  
  // Relations
  hub           Hub       @relation(fields: [hubId], references: [id], onDelete: Cascade)
  memory        Memory    @relation(fields: [memoryId], references: [id], onDelete: Cascade)

  @@index([hubId])
  @@index([memoryId])
  @@index([reporterId])
}

model Invitation {
  id            String    @id @default(uuid())
  hubId         String
  email         String?
  token         String    @unique
  expiresAt     DateTime
  isUsed        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  // Relations
  hub           Hub       @relation(fields: [hubId], references: [id], onDelete: Cascade)

  @@index([hubId])
  @@index([token])
}

model ViewerAccess {
  id            String    @id @default(uuid())
  hubId         String
  userId        String    // References auth.users
  accessLevel   String    @default("viewer") // "viewer", "contributor", "moderator"
  createdAt     DateTime  @default(now())
  lastAccessAt  DateTime?
  
  // Relations
  hub           Hub       @relation(fields: [hubId], references: [id], onDelete: Cascade)

  @@unique([hubId, userId])
  @@index([hubId])
  @@index([userId])
}

model Notification {
  id            String    @id @default(uuid())
  userId        String    // References auth.users
  type          String    // "flag", "new_memory", "invitation"
  content       String
  isRead        Boolean   @default(false)
  relatedId     String?   // ID of related entity (flag, memory, etc.)
  createdAt     DateTime  @default(now())

  @@index([userId])
  @@index([isRead])
}